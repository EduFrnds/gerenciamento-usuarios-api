from sqlalchemy import create_engine, inspect
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from contextlib import contextmanager
from typing import Generator

class DatabaseConfig:
    def __init__(self, database_url: str = "sqlite:///./users.db"):
        self.database_url = database_url
        self.engine = create_engine(
            self.database_url,
            connect_args={"check_same_thread": False} if "sqlite" in self.database_url else {}
        )
        self.session_local = sessionmaker(
            bind=self.engine,
            autocommit=False,
            autoflush=False,
            expire_on_commit=False
        )
        self.base = declarative_base()

    @contextmanager
    def get_db(self) -> Generator:

        db = self.session_local()
        try:
            yield db
        finally:
            db.close()

    def create_tables(self):

        self.base.metadata.create_all(bind=self.engine)

    @staticmethod
    def table_exists(self, table_name: str) -> bool:

        inspector = inspect(self.engine)
        return table_name in inspector.get_table_names()
